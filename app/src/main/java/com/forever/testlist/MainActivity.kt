package com.forever.testlist

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.animation.animateColorAsState
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.asPaddingValues
import androidx.compose.foundation.layout.defaultMinSize
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.systemBars
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyListState
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Checkbox
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.derivedStateOf
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateMapOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.snapshotFlow
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import com.forever.testlist.ui.theme.TestListTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            TestListTheme {
                MyApp()
            }
        }
    }
}

// --- Data models ---
data class ProjectItem(
    val name: String,
    val isOriginal: Boolean = true,
    var isExpanded: Boolean = false
)

data class ProjectGroup(
    val title: String,
    val items: MutableList<ProjectItem>,
    var isExpanded: Boolean = false
)

data class SectionItem(
    val name: String
)

data class SectionGroup(
    val title: String,
    val items: MutableList<SectionItem>
)

@Composable
fun MyApp() {
    // StickyHeadersHighlightExample()
    Box(modifier = Modifier.fillMaxSize()) {
        // È°µÈù¢‰∏ªÂÜÖÂÆπ
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(bottom = 80.dp) // ÁªôÂ∫ïÈÉ®ÊåâÈíÆÁïôÁ©∫Èó¥
        ) {
            CombinedStickyLists()
        }

        // Â∫ïÈÉ®ÊåâÈíÆÂõ∫ÂÆö
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .wrapContentHeight() // üëà È´òÂ∫¶Ê†πÊçÆÊåâÈíÆÂÆûÈôÖÂÜÖÂÆπËá™ÈÄÇÂ∫î
                .align(Alignment.BottomCenter)
                .background(Color.Yellow) // ‚úÖ ÂèØÈÄâÔºöÂä†ËÉåÊôØÁ°Æ‰øùÂèØËßÅ
        ) {
            Column {
                HorizontalDivider(
                    thickness = 0.5.dp,
                    color = Color.LightGray
                )
                ThreeAlignedButtons(
                    modifier = Modifier
                        .fillMaxWidth()
                )
            }
        }
    }
}

@OptIn(ExperimentalFoundationApi::class)
@Composable
fun StickyHeadersHighlightExample() {
    val sections = (1..5).map { section ->
        "Section $section" to List(10) { "Item $section-$it" }
    }

    val listState = rememberLazyListState()
    val currentStickyIndex = remember { derivedStateOf { getCurrentStickyHeaderIndex(listState, sections) } }

    // ÊâÄÊúâÈÄâ‰∏≠È°πÔºàÊìç‰ΩúÊï¥‰∏™ÂàóË°®Ôºâ
    val selectedItems = remember { mutableStateOf(mutableSetOf<String>()) }

    LazyColumn(state = listState,
        modifier = Modifier
            .fillMaxSize()
            .padding(WindowInsets.systemBars.asPaddingValues())) {
        sections.forEachIndexed { index, (header, items) ->
            stickyHeader {
                val isCurrentSticky = currentStickyIndex.value == index
                // Âä®ÁîªËøáÊ∏°È¢úËâ≤
                val backgroundColor by animateColorAsState(
                    targetValue = if (isCurrentSticky) Color.Red else Color.LightGray,
                    label = "headerColor"
                )

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .background(backgroundColor)
                        .padding(8.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(text = header, color = Color.White)

                    // ‰ªÖÂΩìÂâç sticky header ÊòæÁ§∫ÊåâÈíÆ
                    if (isCurrentSticky) {
                        Row {
                            TextButton(onClick = {
                                // ÂÖ®ÈÄâÔºöÊ∑ªÂä†ÊâÄÊúâ item
                                selectedItems.value = sections.flatMap { it.second }.toMutableSet()
                            }) {
                                Text("ÂÖ®ÈÄâ", color = Color.White)
                            }

                            TextButton(onClick = {
                                val allItems = sections.flatMap { it.second }
                                val current = selectedItems.value
                                selectedItems.value = allItems.mapNotNull {
                                    if (current.contains(it)) null else it
                                }.toMutableSet()
                            }) {
                                Text("ÂèçÈÄâ", color = Color.White)
                            }

                            TextButton(onClick = {
                                selectedItems.value.clear()
                            }) {
                                Text("ÂèñÊ∂à", color = Color.White)
                            }
                        }
                    }
                }
            }

            // ÂàóË°®È°π
            items(items) { item ->
                val isSelected = selectedItems.value.contains(item)
                Text(
                    text = if (isSelected) "‚úÖ $item" else item,
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp)
                        .background(if (isSelected) Color(0xFFE0F7FA) else Color.Transparent)
                )
            }
        }
    }
}

// Helper function to find the current sticky header index
fun getCurrentStickyHeaderIndex(
    listState: LazyListState,
    sections: List<Pair<String, List<String>>>
): Int {
    // Get index of the first visible item
    val firstVisibleIndex = listState.firstVisibleItemIndex

    // Count how many items are before each header
    var runningIndex = 0
    for ((sectionIndex, section) in sections.withIndex()) {
        if (firstVisibleIndex == runningIndex) {
            return sectionIndex
        }
        runningIndex += 1 + section.second.size // 1 for header + number of items
        if (firstVisibleIndex < runningIndex) {
            return sectionIndex
        }
    }
    return 0
}

/**
 * ‚úÖ Header ËÉåÊôØÁ∫¢Ëâ≤‰ªçÂè™Áî®‰∫é Sticky Header
 *
 * ‚úÖ Project Âíå Task ÂàÜÁªÑÊìç‰Ωú„ÄÇÂú®project Âíå task sectionÁöÑheader ÈÉΩÂú®ÂΩìÂâçÈ°µÈù¢ÊòæÁ§∫ÁöÑÊÉÖÂÜµ‰∏ãÔºåprojectÁöÑheader Âíåtask sectionÁöÑheader ÈÉΩÂèØ‰ª•ÊòæÁ§∫ÂèñÊ∂à„ÄÇÂÖ®ÈÄâ ÂèçÈÄâÊåâÈíÆ„ÄÇ‰ΩÜÊòØÈíàÂØπtask sectionÁöÑÂàóË°®ÔºåÈúÄË¶ÅÊª°Ë∂≥Ôºåtask sectionÁöÑheader Âú®ÂΩìÂâçÈ°µÈù¢ÊòæÁ§∫ÁöÑÊó∂ÂÄô ÔºåÁ¨¨‰∏Ä‰∏™task sectionÁöÑheader ÊòæÁ§∫ÂèñÊ∂à„ÄÇÂÖ®ÈÄâ ÂèçÈÄâÊåâÈíÆ„ÄÇ
 *
 * ‚úÖ LazyColumn ÁªìÊûÑ‰∏çÂèò
 *
 * ‚úÖ ÊåâÈíÆÂäüËÉΩÔºöÂÖ®ÈÄâ / ÂèçÈÄâ / ÂèñÊ∂à
 *
 * ‚úÖ ÊîØÊåÅÂÆûÊó∂Âà∑Êñ∞ÂíåÈÄâ‰∏≠È´ò‰∫Æ
 */
@OptIn(ExperimentalFoundationApi::class)
@Composable
fun CombinedStickyLists() {
    // 3 ‰∏™ÈöèÊú∫ÊñáÊú¨ÔºåÂ±ïÁ§∫Âú®È°∂ÈÉ®
    val randomTexts = List(3) { "Random Item ${it + 1}" }

    // ‰ΩøÁî® ProjectGroup Âíå SectionGroup Êõø‰ª£‰πãÂâçÁöÑ List<Pair<String, List<String>>>
    val projectGroups = listOf(
        ProjectGroup(
            title = "Project A",
            items = mutableListOf(
                ProjectItem("Compose"),
                ProjectItem("ViewModel"),
                // ‰Ω†ÂèØ‰ª•ÁªßÁª≠Ê∑ªÂä†È°πÁõÆ
            )
        ),
        // ÂèØ‰ª•Ê∑ªÂä†Êõ¥Â§öÈ°πÁõÆÁªÑ
    )

    val sectionGroups = listOf(
        SectionGroup(
            title = "Task Section 1",
            items = MutableList(50) { SectionItem("Task 1-${it + 1}") }
        ),
        SectionGroup(
            title = "Task Section 2",
            items = MutableList(50) { SectionItem("Task 2-${it + 1}") }
        ),
        SectionGroup(
            title = "Task Section 3",
            items = MutableList(50) { SectionItem("Task 3-${it + 1}") }
        ),
    )

    val allGroups: List<Any> = projectGroups + sectionGroups
    val projectCount = projectGroups.size

    val listState = rememberLazyListState()
    val currentStickyIndex = remember { mutableStateOf(0) }
    val visibleHeaderIndices = remember { mutableStateOf(setOf<Int>()) }
    val firstVisibleTaskHeaderIndex = remember { mutableStateOf<Int?>(null) }

    // ËÆ∞ÂΩïÈÄâ‰∏≠Áä∂ÊÄÅÔºåÈ°πÁõÆÂíå‰ªªÂä°ÂàÜÂà´Áª¥Êä§ÈÄâ‰∏≠ÈõÜÂêà
    val selectedProjects = remember {
        mutableStateMapOf<Int, MutableSet<String>>().apply {
            projectGroups.forEachIndexed { index, group ->
                put(index, mutableSetOf())
            }
        }
    }
    val selectedTasks = remember { mutableStateOf(mutableSetOf<String>()) }

    // ÁõëÂê¨ LazyColumn ÂèØËßÅÈ°πÔºåÊõ¥Êñ∞ÂΩìÂâç sticky header ÂèäÂèØËßÅ header ÈõÜÂêà
    LaunchedEffect(listState) {
        snapshotFlow { listState.layoutInfo }
            .collect { layoutInfo ->
                val visibleItems = layoutInfo.visibleItemsInfo
                val visibleHeaders = mutableSetOf<Int>()
                var firstTaskHeaderFound: Int? = null

                visibleItems.forEach { itemInfo ->
                    val headerIdx = findHeaderIndexFromItemIndex(itemInfo.index, projectGroups, sectionGroups, randomTexts.size)
                    val sectionStartIndex = getItemStartIndexForSection(headerIdx, projectGroups, sectionGroups, randomTexts.size)
                    if (itemInfo.index == sectionStartIndex) {
                        visibleHeaders.add(headerIdx)
                        if (headerIdx >= projectCount && firstTaskHeaderFound == null) {
                            firstTaskHeaderFound = headerIdx
                        }
                    }
                }

                currentStickyIndex.value = findHeaderIndexFromItemIndex(
                    layoutInfo.visibleItemsInfo.firstOrNull()?.index ?: 0,
                    projectGroups,
                    sectionGroups,
                    randomTexts.size
                )

                visibleHeaderIndices.value = visibleHeaders
                firstVisibleTaskHeaderIndex.value = firstTaskHeaderFound
            }
    }

    LazyColumn(
        state = listState,
        modifier = Modifier
            .fillMaxSize()
            .padding(WindowInsets.systemBars.asPaddingValues())
    ) {
        // ÊòæÁ§∫È°∂ÈÉ®ÈöèÊú∫ÊñáÊú¨È°π
        items(randomTexts) { item ->
            Text(
                text = item,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
                    .background(Color(0xFFF5F5F5))
            )
        }

        // ÈÅçÂéÜÊâÄÊúâÂàÜÁªÑÔºåÊòæÁ§∫ StickyHeader ÂíåÂÜÖÂÆπ
        allGroups.forEachIndexed { index, group ->
            val isProject = index < projectCount
            val isSticky = index == currentStickyIndex.value
            val isVisible = visibleHeaderIndices.value.contains(index)
            val isFirstVisibleTaskHeader = index == firstVisibleTaskHeaderIndex.value

            val showButtons = when {
                isProject && isVisible -> true
                !isProject && isFirstVisibleTaskHeader -> true
                else -> false
            }

            stickyHeader {
                val bgColor by animateColorAsState(
                    targetValue = if (isSticky) Color.Red else Color.LightGray,
                    label = "headerColor"
                )
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .defaultMinSize(minHeight = 56.dp)
                        .background(bgColor)
                        .padding(8.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    val title = if (isProject) (group as ProjectGroup).title else (group as SectionGroup).title
                    Text(text = title, color = Color.White)

                    if (showButtons) {
                        Row {
                            TextButton(onClick = {
                                if (isProject) {
                                    // ÂÖ®ÈÄâÂΩìÂâçÈ°πÁõÆÁªÑÊâÄÊúâÈ°π
                                    val projGroup = group as ProjectGroup
                                    selectedProjects[index] = projGroup.items.map { it.name }.toMutableSet()
                                } else {
                                    // ÂÖ®ÈÄâÊâÄÊúâ‰ªªÂä°È°π
                                    val allTasks = sectionGroups.flatMap { it.items }.map { it.name }
                                    selectedTasks.value = allTasks.toMutableSet()
                                }
                            }) {
                                Text("ÂÖ®ÈÄâ", color = Color.White)
                            }

                            TextButton(onClick = {
                                if (isProject) {
                                    val projGroup = group as ProjectGroup
                                    val current = selectedProjects[index] ?: mutableSetOf()
                                    // ÂèçÈÄâÔºöÂΩìÂâçÊú™ÈÄâ‰∏≠È°πÂä†ÂÖ•ÔºåÂ∑≤ÈÄâ‰∏≠È°πÁßªÈô§
                                    selectedProjects[index] = projGroup.items.mapNotNull {
                                        if (current.contains(it.name)) null else it.name
                                    }.toMutableSet()
                                } else {
                                    val allTasks = sectionGroups.flatMap { it.items }.map { it.name }
                                    val current = selectedTasks.value
                                    selectedTasks.value = allTasks.mapNotNull {
                                        if (current.contains(it)) null else it
                                    }.toMutableSet()
                                }
                            }) {
                                Text("ÂèçÈÄâ", color = Color.White)
                            }

                            TextButton(onClick = {
                                if (isProject) {
                                    selectedProjects[index]?.clear()
                                } else {
                                    selectedTasks.value.clear()
                                }
                            }) {
                                Text("ÂèñÊ∂à", color = Color.White)
                            }
                        }
                    }
                }
            }

            // ÊòæÁ§∫ÁªÑÂÜÖÊâÄÊúâÈ°πÔºåÊîØÊåÅÈÄâ‰∏≠Âíå Checkbox ÊéßÂà∂
            if (isProject) {
                val projGroup = group as ProjectGroup
                items(projGroup.items) { item ->
                    val isSelected = selectedProjects[index]?.contains(item.name) == true
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(horizontal = 16.dp, vertical = 8.dp)
                            .background(if (isSelected) Color(0xFFE0F7FA) else Color.Transparent),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Checkbox(
                            checked = isSelected,
                            onCheckedChange = { checked ->
                                val currentSet = selectedProjects[index] ?: mutableSetOf()
                                val newSet = currentSet.toMutableSet()
                                if (checked) {
                                    newSet.add(item.name)
                                } else {
                                    newSet.remove(item.name)
                                }
                                selectedProjects[index] = newSet
                            }
                        )
                        Text(
                            text = item.name,
                            modifier = Modifier.padding(start = 8.dp)
                        )
                    }
                }
            } else {
                val secGroup = group as SectionGroup
                items(secGroup.items) { item ->
                    val isSelected = selectedTasks.value.contains(item.name)
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(horizontal = 16.dp, vertical = 8.dp)
                            .background(if (isSelected) Color(0xFFE0F7FA) else Color.Transparent),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Checkbox(
                            checked = isSelected,
                            onCheckedChange = { checked ->
                                val newSet = selectedTasks.value.toMutableSet()
                                if (checked) {
                                    newSet.add(item.name)
                                } else {
                                    newSet.remove(item.name)
                                }
                                selectedTasks.value = newSet
                            }
                        )
                        Text(
                            text = item.name,
                            modifier = Modifier.padding(start = 8.dp)
                        )
                    }
                }
            }
        }
    }
}

/**
 * ËÆ°ÁÆóÁªôÂÆö itemIndex Â±û‰∫éÂì™‰∏™ÂàÜÁªÑÁöÑÁ¥¢Âºï
 * Âõ†‰∏∫È°∂ÈÉ®Êúâ randomTexts.size ‰∏™ÈöèÊú∫È°πÔºåÈúÄË¶ÅÂÅöÂÅèÁßª
 */
fun findHeaderIndexFromItemIndex(
    itemIndex: Int,
    projectGroups: List<ProjectGroup>,
    sectionGroups: List<SectionGroup>,
    offset: Int
): Int {
    var runningIndex = offset
    val allGroups = projectGroups + sectionGroups
    for ((sectionIndex, group) in allGroups.withIndex()) {
        val size = if (group is ProjectGroup) group.items.size else (group as SectionGroup).items.size
        if (itemIndex == runningIndex) return sectionIndex
        runningIndex += 1 + size
        if (itemIndex < runningIndex) return sectionIndex
    }
    return 0
}

/**
 * Ëé∑ÂèñÊåáÂÆöÂàÜÁªÑÂú®ÂàóË°®‰∏≠ÁöÑËµ∑Âßã item Á¥¢ÂºïÔºàÂåÖÊã¨ headerÔºâ
 */
fun getItemStartIndexForSection(
    sectionIndex: Int,
    projectGroups: List<ProjectGroup>,
    sectionGroups: List<SectionGroup>,
    offset: Int
): Int {
    var index = offset
    val allGroups = projectGroups + sectionGroups
    for (i in 0 until sectionIndex) {
        val group = allGroups[i]
        val size = if (group is ProjectGroup) group.items.size else (group as SectionGroup).items.size
        index += 1 + size
    }
    return index
}

@Composable
fun ThreeAlignedButtons(modifier: Modifier = Modifier) {
    Box(
        modifier = modifier
            .padding(horizontal = 24.dp, vertical = 20.dp), // padding ÊéßÂà∂ÂÜÖÈÉ®Èó¥Ë∑ù
    ) {
        // Â∑¶‰æßÊåâÈíÆ
        TextButton(
            onClick = { /*TODO*/ },
            modifier = Modifier.align(Alignment.CenterStart),
            colors = ButtonDefaults.textButtonColors(
                containerColor = Color.Transparent,
                contentColor = Color.Unspecified
            ),
            contentPadding = PaddingValues(
                start = 12.dp,
                top = 8.dp,
                end = 12.dp,
                bottom = 8.dp
            ),
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Image(
                    painter = painterResource(id = R.drawable.ic_launcher_background),
                    contentDescription = null,
                    modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(4.dp))
                Text("Â∑¶Ëæπ")
            }
        }

        // ‰∏≠Èó¥ÊåâÈíÆ
        TextButton(
            onClick = { /*TODO*/ },
            modifier = Modifier.align(Alignment.Center),
            colors = ButtonDefaults.textButtonColors(
                containerColor = Color.Transparent,
                contentColor = Color.Unspecified
            ),
            contentPadding = PaddingValues(
                start = 12.dp,
                top = 8.dp,
                end = 12.dp,
                bottom = 8.dp
            ),
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Image(
                    painter = painterResource(id = R.drawable.ic_launcher_background),
                    contentDescription = null,
                    modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(4.dp))
                Text("‰∏≠Èó¥")
            }
        }

        // Âè≥‰æßÊåâÈíÆ
        TextButton(
            onClick = { /*TODO*/ },
            modifier = Modifier.align(Alignment.CenterEnd),
            colors = ButtonDefaults.textButtonColors(
                containerColor = Color.Transparent,
                contentColor = Color.Unspecified
            ),
            contentPadding = PaddingValues(
                start = 12.dp,
                top = 8.dp,
                end = 12.dp,
                bottom = 8.dp
            ),
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Image(
                    painter = painterResource(id = R.drawable.ic_launcher_background),
                    contentDescription = null,
                    modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(4.dp))
                Text("Âè≥Ëæπ")
            }
        }
    }
}
